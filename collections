* same datatype


index by tables(associative arrays)
nested tables
varray


---------------------------

index by tables(associative arrays)

Orginallay called as pl/sql tables

we can not store them in Database


declare
type emp_type is table of varchar2(100) index by binary_integer;
emp_tbl emp_type;
si_indx number;
begin
emp_tbl(1) :='ALI';
emp_tbl(2) :='VALI';
emp_tbl(3) :='PIVALI';
emp_tbl(7) :='MAMED';

si_indx := emp_tbl.first;

while si_indx is not null
loop

dbms_output.put_line(emp_tbl(si_indx));

si_indx := emp_tbl.next(si_indx);
    
end loop;
end;

--------------------------------------------------------------


Nested Tables
-----------------------
* can be stored in Database
* they can be indexed only by integer
* must be initialize



declare
type si_coll_nested is table of varchar2(100);
si_col si_coll_nested :=si_coll_nested();
si_id number;
begin

si_col.extend(3);

si_col(1):='ALI';
si_col(2):='VALI';
si_col(3):='PIVALI';

si_id := si_col.first;

while si_id is not null loop

dbms_output.put_line(si_col(si_id));

si_id := si_col.next(si_id);
end loop;

end;

----------------------------------
varray
------------------------

* you can not delete data
* they can be stored in database

declare
type myvarray is varray(4) varchar2(10);
si_varray myvarray ;= myvarray();
si_id number;
begin
si_varray.extend(3);
si_varray(1) :='ALI';
si_varray(2) :='VALI';
si_varray(3) :='PIVALI';

si_id := si_varray.first;

while si is not null loop


end loop;
end;



------------------------------------
multiset operators
----------------------------------------------------------

declare
type si_nested is table of number;
si_c1 si_nested :=si_nested(1,2,3,4,5,6);
si_c2 si_nested :=si_nested(5,6,7,8,9);
begin

--si_c1 := si_c1 multiset union si_c2;

--si_c1 := si_c1 multiset except si_c2;

--si_c1 := si_c1 multiset union distinct si_c2

si_c1 := si_c1 multiset intersect si_c2;

for k in si_c1.first .. si_c1.last
loop
    dbms_output.put_line(si_c1(k));
end loop;

end;

